import random
random.seed(313)

from config import *
from tqdm import tqdm

class Var:
    def __init__(self,name):
        self.name=name

def gvar(*args):
    return [Var(x) for x in args]

def rstr(l):
    return ''.join(random.choice(ALPHA) for _ in range(l))

class CFG:
    def __init__(self,sv,prod):
        self.sv=sv # starting variable
        self.prod=prod # var to prods associated with the var
    
    def apply_prod(self,partial,idx,prod):
        # TODO: add compression so that when two strings are next to each other they get combined, only needs to be done around idx
        x=partial[:idx]+prod+partial[idx+1:]
        return x
    
    def get_var_indices(self,partial):
        for i,x in enumerate(partial):
            if type(x)==Var:yield i
    
    def randomly_apply_prod(self,partial):
        ind=list(self.get_var_indices(partial))
        if len(ind)==0:return ''.join(partial),True # we're done, there are no more vars
        idx=random.choice(ind)
        v=partial[idx]
        prod=random.choice(self.prod[v])
        x=self.apply_prod(partial,idx,prod)
        return x,False # we're done, we applied a production to a var

    def generate_strs(self,tc=CFG_TC,depth=CFG_DEPTH):
        strs=set()

        for t in tqdm(range(tc)):
            part=(self.sv,)
            for i in range(depth):
                part,done=self.randomly_apply_prod(part)
                if done:
                    strs.add(part)
                    break
        return strs

def verify_cfg(lang,cfg):
    # to verify a cfg, check both set containments experimentally
    s_cfg=cfg.generate_strs()
    s_lang=set(lang.gen())

    memb=True

    try:
        lang.has
    except:
        memb=False
    
    e1=[]
    e2=[]

    if memb:
        for s in s_cfg:
            if lang.has(s):continue
            e1.append(s)

    else:
        for s in s_cfg:
            if len(s) > THRESHOLD or s in s_lang:continue
            e1.append(s)

    for s in s_lang:
        if len(s) > THRESHOLD or s in s_cfg:continue
        e2.append(s)
    
    if len(e1)>0:
        print("Error: CFG generated some strings that may not be in the language. Total:",len(e1))
        print("Some examples are:",e1[:10])
    
    if len(e2)>0:
        print("Error: Some strings in the language were not generated by the CFG. Total:",len(e2))
        print("Some examples are:",e2[:10])